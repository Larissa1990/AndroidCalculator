/* CalculatorParser.java */
/* Generated By:JavaCC: Do not edit this line. CalculatorParser.java */
package com.larissa.android.calculator;

import java.io.StringReader;

public class CalculatorParser implements CalculatorParserConstants {
    public CalculatorParser(String expr){
        this(new StringReader(expr));
        }

  final public double calc() throws ParseException, NumberFormatException {double left;
    double right;
    left = multOrDiv();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SUBTRACT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        jj_consume_token(ADD);
        right = multOrDiv();
left+=right;
        break;
        }
      case SUBTRACT:{
        jj_consume_token(SUBTRACT);
        right = multOrDiv();
left-=right;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public double multOrDiv() throws ParseException, NumberFormatException {double left;
    double right;
    left = parseBase();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case POWER:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:{
        jj_consume_token(MULTIPLY);
        right = parseBase();
left*=right;
        break;
        }
      case DIVIDE:{
        jj_consume_token(DIVIDE);
        right = parseBase();
left/=right;
        break;
        }
      case POWER:{
        jj_consume_token(POWER);
        right = parseBase();
left=Math.pow(left,right);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public double parseBase() throws ParseException, NumberFormatException {//Token t=null;
    double num;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PI:
    case E:
    case NUMBER:{
      num = getNum();
{if ("" != null) return num;}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      num = calc();
      jj_consume_token(RPAREN);
{if ("" != null) return num;}
      break;
      }
    case SUBTRACT:{
      jj_consume_token(SUBTRACT);
      num = getNum();
{if ("" != null) return 0-num;}
      break;
      }
    case SIN:{
      jj_consume_token(SIN);
      jj_consume_token(LPAREN);
      num = calc();
      jj_consume_token(RPAREN);
{if ("" != null) return Math.sin(num);}
      break;
      }
    case COS:{
      jj_consume_token(COS);
      jj_consume_token(LPAREN);
      num = calc();
      jj_consume_token(RPAREN);
{if ("" != null) return Math.cos(num);}
      break;
      }
    case TAN:{
      jj_consume_token(TAN);
      jj_consume_token(LPAREN);
      num = calc();
      jj_consume_token(RPAREN);
{if ("" != null) return Math.tan(num);}
      break;
      }
    case LOG:{
      jj_consume_token(LOG);
      jj_consume_token(LPAREN);
      num = calc();
      jj_consume_token(RPAREN);
{if ("" != null) return Math.log10(num);}
      break;
      }
    case LN:{
      jj_consume_token(LN);
      jj_consume_token(LPAREN);
      num = calc();
      jj_consume_token(RPAREN);
{if ("" != null) return Math.log(num);}
      break;
      }
    case SQRT:{
      jj_consume_token(SQRT);
      jj_consume_token(LPAREN);
      num = calc();
      jj_consume_token(RPAREN);
{if ("" != null) return Math.sqrt(num);}
      break;
      }
    case FACTORIAL:{
      jj_consume_token(FACTORIAL);
      jj_consume_token(LPAREN);
      num = calc();
      jj_consume_token(RPAREN);
{if ("" != null) return Calculator.factorial(num);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public double getNum() throws ParseException, NumberFormatException {Token t=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      t = jj_consume_token(NUMBER);
{if ("" != null) return Double.parseDouble(t.image);}
      break;
      }
    case PI:{
      t = jj_consume_token(PI);
{if ("" != null) return Math.PI;}
      break;
      }
    case E:{
      t = jj_consume_token(E);
{if ("" != null) return Math.E;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public CalculatorParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x60,0x60,0x98,0x98,0x3f9d40,0x1c00,};
	}

  /** Constructor with InputStream. */
  public CalculatorParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CalculatorParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CalculatorParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CalculatorParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CalculatorParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CalculatorParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CalculatorParser(CalculatorParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CalculatorParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[22];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 22; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
