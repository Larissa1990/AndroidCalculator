options{
    STATIC=false;   // 关闭生成静态java方法，默认是true
}
PARSER_BEGIN(CalculatorParser)
package com.larissa.android.calculator;

public class CalculatorParser {
    public CalculatorParser(String expr){
        this(new StringReader(expr));
        }

}
PARSER_END(CalculatorParser)

SKIP:{
    " "
}

TOKEN:{
    <EQUALS: "=">
    | <MULTIPLY: "*">
    | <DIVIDE: "/">
    | <ADD: "+">
    | <SUBTRACT: "-">
    | <POWER: "^">
    | <LPAREN: "(">
    | <RPAREN: ")">
}

TOKEN : {
    <PI: "pi">
    | <E: "e">
}

TOKEN : {
    <NUMBER:<DIGITS>
    | <DIGITS>"."<DIGITS>
    | <DIGITS>"."
    | "."<DIGITS>>
    |
    <#DIGITS:(["0"-"9"])+>
}

TOKEN:{
<NUM:<NUMBER>
| <PI>
| <E>>
}

TOKEN : {
    <SIN:"sin">
    | <COS:"cos">
    | <TAN: "tan">
    | <SQRT: "sqrt">
    | <FACTORIAL: "!">
    | <LOG: "log">
    | <LN: "ln">
}



double calc() throws NumberFormatException:
{
    double left;
    double right;
}
{
    left=multOrDiv()
    (<ADD> right=multOrDiv(){left+=right;}
    | <SUBTRACT> right=multOrDiv(){left-=right;}
    )*{return left;}
}

double multOrDiv()throws NumberFormatException:
{
    double left;
    double right;
}
{
    left=parseBase()
    (<MULTIPLY> right=parseBase(){left*=right;}
    | <DIVIDE> right=parseBase(){left/=right;}
    | <POWER> right=parseBase() {left=Math.pow(left,right);}
    )*{return left;}
}


double parseBase()throws NumberFormatException:
{
    //Token t=null;
    double num;
}
{
    num=getNum(){return num;}|
    <LPAREN> num=calc() <RPAREN> {return num;}
    | <SUBTRACT> num=getNum() {return 0-num;}
    | <SIN><LPAREN> num=calc() <RPAREN> {return Math.sin(num);}
    | <COS><LPAREN> num=calc() <RPAREN> {return Math.cos(num);}
    | <TAN><LPAREN>num=calc()<RPAREN> {return Math.tan(num);}
    | <LOG><LPAREN>num=calc()<RPAREN> {return Math.log10(num);}
    | <LN><LPAREN> num=calc() <RPAREN> {return Math.log(num);}
    | <SQRT> <LPAREN> num=calc() <RPAREN> {return Math.sqrt(num);}

}

double getNum() throws NumberFormatException:{
    Token t=null;
}{
    t=<NUMBER> {return Double.parseDouble(t.image);}
    | t=<PI>{return Math.PI;}
    | t=<E>{return Math.E;}
}








